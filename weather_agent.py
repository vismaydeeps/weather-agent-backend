# -*- coding: utf-8 -*-
"""weather-agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cxpIsf6oo21zZfsoNSKYrcDXk1_5OBpN
"""


import os
import requests
from llama_index.core.agent import ReActAgent
from llama_index.llms.groq import Groq
from llama_index.core.tools import FunctionTool
from typing import Optional
import requests
from dotenv import load_dotenv
load_dotenv()


API_KEY = os.environ["Weather_API_KEY"]

llm = Groq(
    model = "llama-3.3-70b-versatile",
    temperature = 0
)


"""Weather Forecast Function"""

#custon weather forcast function
def find_weather(city: str) -> dict:
  """This function returns the current weather forcast for a given city"""
  BASE_URL = "https://api.openweathermap.org/data/2.5/weather"
  units = "metric"
  params = {
      'q' : city,
      'appid': API_KEY,
      'units': units
  }
  response = requests.get(BASE_URL, params=params)
  if response.status_code ==200:
    result = response.json()
    return result
  else:
    return{
        "error": f"Failed to fetch the weather for city : {city}. Status code : {response.status_code}",
        "details": response.text
    }

# #instead of city name if want to give zip code along with contry code to reduce ambiguity (like london in GB and london in US) then can use this function.

# def find_weather(zip_code: str, country_code: str) -> dict:
#   """This function returns the current weather forcast for a given zip code of city and country it belongs to"""
#   units = "metric"
#   params = {
#       #'q' : city,
#       'zip' : f"{zip_code},{country_code}",
#       'appid': API_KEY,
#       'units': units
#   }

# BASE_URL = "https://api.openweathermap.org/data/2.5/weather"

# def find_weather(city: Optional[str] = None, zip_code: Optional[str] = None, country_code: Optional[str] = None) -> dict:
#   """This function returns the current weather forcast for a given city or zip_code.
#   If both are provided, use zip_code as priority. If zip_code is provided without country_code, it will prompt for country_code"""

#   units = "metric"
#   params = {
#       "appid" : API_KEY,
#       "units" : units
#   }

#   if zip_code:
#     if not country_code:
#       return {"error": "country code is required when using zip code"}
#     params["zip"] = f"{zip_code},{country_code}"
#     print(f"Requesting with ZIP: {params['zip']}")


#   elif city:
#     params["q"] = city
#     print(f"Requesting with City: {params['q']}")

#   else:
#     return {"error": "Should either provide city name or zip code to see weather"}

#     response = requests.get(BASE_URL, params= params)
#     print(f"Request URL: {response.url}")
#     result = response.json()
#     return result


def get_forecast(city: str) -> dict:
  """This function returns the weather forecast for upto 5 days for a given city"""
  BASE_URL = "https://api.openweathermap.org/data/2.5/forecast"
  units = "metric"
  params = {
      'q' : city,
      'appid': API_KEY,
      'units': units
  }
  response = requests.get(BASE_URL, params=params)
  if response.status_code ==200:
    result = response.json()
    return result
  else:
    return{
        "error": f"Failed to fetch the weather for city : {city}. Status code : {response.status_code}",
        "details": response.text
    }

# output = find_weather('560057')
# print(output)

# output = find_weather("hyderabad")
# print(output)

# output = get_forecast("hyderabad")
# print(output)



#converting the function into function tool
weather_tool = FunctionTool.from_defaults(fn = find_weather)
forecast_tool = FunctionTool.from_defaults(fn=get_forecast)

tools_list = [weather_tool,forecast_tool]

#Creating an agent
agent = ReActAgent.from_tools(
    tools = tools_list,
    llm = llm,
    verbose = False
)

# response = agent.chat("Whats the 5 day weather forecast of 500043, IN?")

# response = agent.chat("whats the weather in New York? Is it going to rain tonight?")

# response

# print(response.sources[0].raw_output['weather'][0]['description'])

# print(dir(response.sources[0]))